apply plugin: 'com.android.library'
//apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'com.github.dcendents.android-maven'
//apply plugin: 'realm-android'
//apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 30
    // resourcePrefix 'mpcht'
    defaultConfig {
        minSdkVersion 21
        //targetSdkVersion 30
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "DEBUG_FLAG", 'true'

        }

        qc_test {

        }

        release {
            minifyEnabled false

        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true // this prevents "not mocked" error
    }
}

repositories {
//    maven {
//        url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
//    }
//    jcenter()
    maven {
        url "https://maven.google.com"
    }
    jcenter()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //compile 'com.android.support:support-v4:19.+'
    //provided 'io.realm:realm-android:0.87.5' // "optional" dependency to realm-database API
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:1.9.5"
}

//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
